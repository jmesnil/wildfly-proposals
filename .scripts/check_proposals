#!/usr/bin/env ruby

ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../Gemfile', __dir__)
require 'bundler/setup'
require 'fileutils'
require 'yaml'

class FrontMatterExtractor
  def process lines
    return {} if lines.empty?

    front_matter = []
    if lines.first.chomp == '---'
      original_lines = lines.dup
      lines.shift
      while !lines.empty? && lines.first.chomp != '---'
        front_matter << lines.shift
      end

      YAML.load(front_matter.join("\n"))
    end
  end
end

class MetadataChecker
  def initialize
    @categories = load_all_categories()
    @stability_levels = ["experimental", "preview", "community", "default"]
  end

  def check pr_number, front_matter
    STDERR.puts "Check front matter #{front_matter}"
    errors = []
    categories_errors = check_categories(pr_number, front_matter)
    if categories_errors.length() > 0
      errors << categories_errors
      system("gh pr edit #{pr_number} --add-label invalid-categories")
    else 
      system("gh pr edit #{pr_number} --remove-label invalid-categories")
    end
    issue_errors = check_issue(pr_number, front_matter)
    if issue_errors.length() > 0
      errors << issue_errors
      system("gh pr edit #{pr_number} --add-label missing-issue")
    else
      system("gh pr edit #{pr_number} --remove-label missing-issue")
    end
    begin
      stability_level, err = check_stability_level(pr_number, front_matter)
      system("gh pr edit #{pr_number} --remove-label invalid-stability-level")
      # remove any previous stability-levels
      @stability_levels.map { | level | system("gh pr edit #{pr_number} --remove-label stability-level/#{level}") }
      system("gh pr edit #{pr_number} --add-label stability-level/#{stability_level}")
    rescue => error
      errors << error.message
      system("gh pr edit #{pr_number} --add-label invalid-stability-level")
      @stability_levels.map { | level | system("gh pr edit #{pr_number} --remove-label stability-level/#{level}") }
    end

    errors
  end

  def check_categories pr_number, front_matter
    errors = []
    unless (front_matter.key? "categories") && (front_matter["categories"] != nil) && (front_matter["categories"].length() > 0)
      errors << "Missing field: categories"
    else
      front_matter["categories"].each do | cat_id |
        if @categories.find { | global_cat | cat_id == global_cat["id"] } == nil
          errors << "New category #{cat_id} must be added to _data/wildfly-categories.yaml"
        end
      end
    end
    errors
  end

  def check_issue pr_number, front_matter
    errors = []
    unless (front_matter.key? "issue") && (front_matter["issue"] != nil)
      errors << "Missing field: issue"
    end
    errors
  end

  def check_stability_level pr_number, front_matter
    unless (front_matter.key? "stability-level") && (@stability_levels.include? front_matter["stability-level"])
      raise "Invalid field: stability-level"
    else
      return front_matter["stability-level"]
    end
  end

  def load_all_categories
    yaml = YAML.load_file("_data/wildfly-categories.yaml")
    return yaml["categories"]
  end
end

front_matter_extractor = FrontMatterExtractor.new
metadata_checker = MetadataChecker.new

check_succeeds = true

pr_number = ARGV[0]
ARGV.shift

puts "Checking PR #{pr_number}"

# Read and print the content of each file passed as arguments
ARGV.each do |file|

  begin
    content = File.read(file)
    front_matter = front_matter_extractor.process content.split("\n")
    errors = metadata_checker.check pr_number, front_matter
    if errors.length() > 0
      check_succeeds = false
      puts "❌ #{file}"
      puts "\tFront matter is not valid: #{front_matter}"
      puts "\tGot errors:"
      errors.each do |err|
        puts "\t* #{err}"
      end
    else
      puts "✅ #{file}"
    end
  rescue => e
    puts "Error reading file #{file}: #{e.message}"
  end
end

exit check_succeeds